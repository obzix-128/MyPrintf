; nasm -f elf64 -o MyPrintf.o -l MyPrintf.lst MyPrintf.s ; ld -s -o MyPrintf MyPrintf.o

section .text

global myPrintf

myPrintf:
    push rdi ; Аргумент (строка) передается в rdi
    call myPrintfOrig
    ret ;не предусмотрен, так как возвращаемся напрямую из myPrintfOrig

;------------------------------------------------------------------------------------------
; Функция аналог printf
; Entry: 
; Exit : 
; Destr: 
;------------------------------------------------------------------------------------------

myPrintfOrig:
    add rsp, 8        ; Пропускаем функцию-трамплин
    pop rsi           ; Копируем адрес строки в rsi
    call strlen       ; Вычисляем длину строки
    mov rdx, rax      ; Длина строки для syscall
    mov rax, 1        ; Номер системного вызова write (1)
    mov rdi, 1        ; Файловый дескриптор (1 = stdout)
    syscall           ; Вызов системного вызова

    ret               ; Возврат из функции

;------------------------------------------------------------------------------------------
; Считает длину строки до тех пор пока не встретит нулевой символ
; Entry: rsi - адрес строки
; Exit : rax
; Destr: None
;------------------------------------------------------------------------------------------

strlen:
    mov rax, rsi      ; Копируем адрес строки
strlen_loop:
    cmp byte [rax], 0 ; Сравниваем текущий символ с нулем
    je strlen_done    ; Если нулевой байт, завершаем
    inc rax           ; Переходим к следующему символу
    jmp strlen_loop   ; Повторяем
strlen_done:
    sub rax, rsi      ; Вычисляем длину строки
    ret               ; Возврат из функции

section .data

